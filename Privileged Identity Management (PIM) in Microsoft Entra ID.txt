

Privileged Identity Management (PIM) in Microsoft Entra ID is a powerful tool for managing, controlling, and monitoring access to critical resources. Hereâ€™s a detailed guide on different use-cases, how to use PIM, and how to create and assign roles via PIM.

Use-Cases of PIM

1. Just-in-Time Access:
   - Scenario: Grant temporary access to users for specific tasks.
   - Benefit: Reduces the risk of prolonged exposure to sensitive resources.

2. Time-Bound Access:
   - Scenario: Assign roles with start and end dates.
   - Benefit: Ensures access is automatically revoked after a specified period.

3. Approval-Based Role Activation:
   - Scenario: Require approval for activating privileged roles.
   - Benefit: Adds an extra layer of security by involving a human decision-maker.

4. Multi-Factor Authentication (MFA) for Role Activation:
   - Scenario: Enforce MFA when activating roles.
   - Benefit: Enhances security by verifying the identity of the user.

5. Access Reviews:
   - Scenario: Periodically review and confirm the necessity of roles.
   - Benefit: Ensures that only necessary roles are retained, reducing risk.

6. Audit and Compliance:
   - Scenario: Track and audit role activations and assignments.
   - Benefit: Provides visibility and helps in compliance with regulatory requirements.

How to Use PIM

#1. Enable PIM
   - Prerequisites: Ensure you have a Microsoft Entra ID P2 or Microsoft Entra ID Governance license.
   - Steps:
     1. Sign in to the Microsoft Entra admin center.
     2. Navigate to Identity Governance > Privileged Identity Management.
     3. Click on Enable to start using PIM.

#2. Configure PIM Settings
   - Steps:
     1. Go to Azure AD roles in PIM.
     2. Configure role settings such as MFA, notifications, and approval workflows.

Creating and Assigning Roles via PIM

#1. Create a Custom Role
   - Steps:
     1. Define the role permissions.
     2. Use the Microsoft Graph API or PowerShell to create the role.

   PowerShell Example:

   Connect-MgGraph -Scopes "RoleManagement.ReadWrite.Directory"

   $rolePermissions = @(
       @{
           "allowedResourceActions" = @(
               "microsoft.directory/applications/credentials/update",
               "microsoft.directory/applications/basic/update"
           )
       }
   )

   $customRole = New-MgRoleManagementDirectoryRoleDefinition -DisplayName "Custom Application Manager" -Description "Can manage basic aspects of application registrations." -RolePermissions $rolePermissions -IsEnabled $true

   $customRole


#2. Assign the Custom Role
   - Steps:
     1. Assign the role to users or groups.
     2. Use the Microsoft Graph API or PowerShell to assign the role.

   PowerShell Example:

   $userId = "user-object-id"
   $roleId = $customRole.Id

   New-MgRoleManagementDirectoryRoleAssignment -PrincipalId $userId -RoleDefinitionId $roleId -DirectoryScopeId "/"


#3. Configure Role Activation Policies
   - Steps:
     1. Set up policies for role activation, such as requiring MFA or approval.
     2. Use the PIM interface or PowerShell to configure these settings.

   PowerShell Example:

   $policy = @{
       "displayName" = "Marketing Campaign Policy"
       "description" = "Policy for marketing campaign access package"
       "requestorSettings" = @{
           "scopeType" = "AllExistingConnectedDirectorySubjects"
           "requestorType" = "User"
       }
       "approvalSettings" = @{
           "isApprovalRequired" = $true
           "isApprovalRequiredForExtension" = $false
           "approvalStages" = @(
               @{
                   "stageNumber" = 1
                   "approvers" = @(
                       @{
                           "principalId" = "approver-id"
                           "principalType" = "User"
                       }
                   )
               }
           )
       }
   }

   New-MgEntitlementManagementAccessPackageAssignmentPolicy -AccessPackageId $createdAccessPackage.Id -BodyParameter $policy


Additional Resources

- [Microsoft Entra PIM Documentation](https://learn.microsoft.com/en-us/entra/id-governance/privileged-identity-management/pim-getting-started)[1](https://learn.microsoft.com/en-us/entra/id-governance/privileged-identity-management/pim-getting-started)
- Microsoft Graph API Documentation[2](https://learn.microsoft.com/en-us/entra/id-governance/privileged-identity-management/pim-configure)

By following these steps, you can effectively manage privileged access in your organization using Microsoft Entra PIM. If you have any specific questions or need further assistance, feel free to ask!

